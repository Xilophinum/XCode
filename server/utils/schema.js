/**
 * Unified Database Schema
 * Supports SQLite, PostgreSQL, and other database types
 *
 * Usage:
 * import { createSchema } from './schema.js'
 * const schema = createSchema('sqlite')  // or 'postgres', 'mysql', etc.
 */

import { pgTable, varchar as pgVarchar, text as pgText, integer as pgInteger, primaryKey as pgPrimaryKey, index as pgIndex } from 'drizzle-orm/pg-core'
import { sqliteTable, text, integer, primaryKey, index } from 'drizzle-orm/sqlite-core'

export function createSchema(dbType = 'sqlite') {
  if (dbType === 'postgres' || dbType === 'postgresql') {
    // ========================================================================
    // POSTGRESQL SCHEMA
    // ========================================================================
    return {
      users: pgTable('users', {
        id: pgVarchar('id', { length: 255 }).primaryKey(),
        name: pgVarchar('name', { length: 255 }).notNull(),
        email: pgVarchar('email', { length: 255 }).notNull().unique(),
        passwordHash: pgVarchar('password_hash', { length: 255 }),
        role: pgVarchar('role', { length: 50 }),
        userType: pgVarchar('user_type', { length: 50 }).notNull().default('local'),
        externalId: pgVarchar('external_id', { length: 255 }),
        groups: pgText('groups'),
        lastLogin: pgText('last_login'),
        isActive: pgVarchar('is_active', { length: 10 }).notNull().default('true'),
        createdAt: pgText('created_at').notNull(),
        updatedAt: pgText('updated_at').notNull(),
      }),

      items: pgTable('items', {
        id: pgVarchar('id', { length: 255 }).primaryKey(),
        name: pgVarchar('name', { length: 255 }).notNull(),
        description: pgText('description'),
        type: pgVarchar('type', { length: 50 }).notNull(),
        path: pgText('path').notNull(),
        userId: pgVarchar('user_id', { length: 255 }).notNull(),
        diagramData: pgText('diagram_data'),
        status: pgVarchar('status', { length: 50 }).notNull().default('active'),
        accessPolicy: pgVarchar('access_policy', { length: 50 }).default('public'),
        allowedGroups: pgText('allowed_groups'),
        maxBuildsToKeep: pgInteger('max_builds_to_keep').default(50),
        maxLogDays: pgInteger('max_log_days').default(30),
        createdAt: pgText('created_at').notNull(),
        updatedAt: pgText('updated_at').notNull(),
      }),

      envVariables: pgTable('env_variables', {
        id: pgVarchar('id', { length: 255 }).primaryKey(),
        key: pgVarchar('key', { length: 255 }).notNull().unique(),
        value: pgText('value').notNull(),
        description: pgText('description'),
        isSecret: pgVarchar('is_secret', { length: 10 }).notNull().default('false'),
        createdAt: pgText('created_at').notNull(),
        updatedAt: pgText('updated_at').notNull(),
      }),

      credentialVault: pgTable('credential_vault', {
        id: pgVarchar('id', { length: 255 }).primaryKey(),
        name: pgVarchar('name', { length: 255 }).notNull(),
        type: pgVarchar('type', { length: 50 }).notNull(),
        description: pgText('description'),
        username: pgVarchar('username', { length: 255 }),
        password: pgText('password'),
        token: pgText('token'),
        privateKey: pgText('private_key'),
        certificate: pgText('certificate'),
        fileData: pgText('file_data'),
        fileName: pgVarchar('file_name', { length: 255 }),
        fileMimeType: pgVarchar('file_mime_type', { length: 100 }),
        url: pgVarchar('url', { length: 500 }),
        environment: pgVarchar('environment', { length: 50 }),
        tags: pgText('tags'),
        customFields: pgText('custom_fields'),
        expiresAt: pgText('expires_at'),
        lastUsed: pgText('last_used'),
        isActive: pgVarchar('is_active', { length: 10 }).notNull().default('true'),
        createdAt: pgText('created_at').notNull(),
        updatedAt: pgText('updated_at').notNull(),
      }),

      passwordVault: pgTable('password_vault', {
        id: pgVarchar('id', { length: 255 }).primaryKey(),
        name: pgVarchar('name', { length: 255 }).notNull(),
        username: pgVarchar('username', { length: 255 }),
        password: pgText('password').notNull(),
        url: pgVarchar('url', { length: 500 }),
        description: pgText('description'),
        createdAt: pgText('created_at').notNull(),
        updatedAt: pgText('updated_at').notNull(),
      }),

      systemSettings: pgTable('system_settings', {
        id: pgVarchar('id', { length: 255 }).primaryKey(),
        category: pgVarchar('category', { length: 100 }).notNull(),
        key: pgVarchar('key', { length: 255 }).notNull().unique(),
        value: pgText('value'),
        defaultValue: pgText('default_value'),
        type: pgVarchar('type', { length: 50 }).notNull(),
        options: pgText('options'),
        label: pgVarchar('label', { length: 255 }).notNull(),
        description: pgText('description'),
        required: pgVarchar('required', { length: 10 }).notNull().default('false'),
        readonly: pgVarchar('readonly', { length: 10 }).notNull().default('false'),
        createdAt: pgText('created_at').notNull(),
        updatedAt: pgText('updated_at').notNull(),
      }),

      agents: pgTable('agents', {
        id: pgVarchar('id', { length: 255 }).primaryKey(),
        name: pgVarchar('name', { length: 255 }).notNull(),
        description: pgText('description'),
        token: pgVarchar('token', { length: 255 }).notNull().unique(),
        maxConcurrentJobs: pgInteger('max_concurrent_jobs').notNull().default(1),
        isLocal: pgVarchar('is_local', { length: 10 }).notNull().default('false'),
        hostname: pgVarchar('hostname', { length: 255 }),
        platform: pgVarchar('platform', { length: 50 }),
        architecture: pgVarchar('architecture', { length: 50 }),
        capabilities: pgText('capabilities'),
        version: pgVarchar('version', { length: 50 }),
        systemInfo: pgText('system_info'),
        status: pgVarchar('status', { length: 50 }).notNull().default('offline'),
        currentJobs: pgInteger('current_jobs').notNull().default(0),
        lastHeartbeat: pgText('last_heartbeat'),
        ipAddress: pgVarchar('ip_address', { length: 45 }),
        firstConnectedAt: pgText('first_connected_at'),
        totalBuilds: pgInteger('total_builds').notNull().default(0),
        tags: pgText('tags'),
        notes: pgText('notes'),
        createdAt: pgText('created_at').notNull(),
        updatedAt: pgText('updated_at').notNull(),
      }),

      builds: pgTable('builds', {
        projectId: pgVarchar('project_id', { length: 255 }).notNull(),
        projectName: pgVarchar('project_name', { length: 255 }).notNull(),
        buildNumber: pgInteger('build_number').notNull(),
        agentId: pgVarchar('agent_id', { length: 255 }),
        agentName: pgVarchar('agent_name', { length: 255 }),
        trigger: pgVarchar('trigger', { length: 50 }).notNull(),
        status: pgVarchar('status', { length: 50 }).notNull(),
        message: pgText('message'),
        startedAt: pgText('started_at').notNull(),
        finishedAt: pgText('finished_at'),
        duration: pgInteger('duration'),
        currentCommandIndex: pgInteger('current_command_index'),
        executionCommands: pgText('execution_commands'),
        currentNodeId: pgVarchar('current_node_id', { length: 255 }),
        currentNodeLabel: pgVarchar('current_node_label', { length: 255 }),
        nodes: pgText('nodes'),
        edges: pgText('edges'),
        nodeCount: pgInteger('node_count'),
        nodesExecuted: pgInteger('nodes_executed'),
        exitCode: pgInteger('exit_code'),
        error: pgText('error'),
        finalOutput: pgText('final_output'),
        canRetryOnReconnect: pgVarchar('can_retry_on_reconnect', { length: 10 }).default('false'),
        parallelBranchesResult: pgText('parallel_branches_result'),
        parallelMatrixResult: pgText('parallel_matrix_result'),
        gitBranch: pgVarchar('git_branch', { length: 255 }),
        gitCommit: pgVarchar('git_commit', { length: 255 }),
        metadata: pgText('metadata'),
        outputLog: pgText('output_log'),
        nodeExecutionStates: pgText('node_execution_states'),
        lastSequence: pgInteger('last_sequence').default(0),
        createdAt: pgText('created_at').notNull(),
        updatedAt: pgText('updated_at').notNull(),
      }, (table) => {
        return {
          pk: pgPrimaryKey({ columns: [table.projectId, table.buildNumber] }),
          statusIdx: pgIndex('idx_builds_status').on(table.status),
          startedAtIdx: pgIndex('idx_builds_started_at').on(table.startedAt),
        }
      }),

      cronJobs: pgTable('cron_jobs', {
        id: pgVarchar('id', { length: 255 }).primaryKey(),
        projectId: pgVarchar('project_id', { length: 255 }).notNull(),
        cronNodeId: pgVarchar('cron_node_id', { length: 255 }).notNull(),
        cronNodeLabel: pgVarchar('cron_node_label', { length: 255 }).notNull(),
        cronExpression: pgVarchar('cron_expression', { length: 100 }).notNull(),
        enabled: pgVarchar('enabled', { length: 10 }).notNull().default('true'),
        nodes: pgText('nodes').notNull(),
        edges: pgText('edges').notNull(),
        lastRun: pgText('last_run'),
        createdAt: pgText('created_at').notNull(),
        updatedAt: pgText('updated_at').notNull(),
      }),

      auditLogs: pgTable('audit_logs', {
        id: pgVarchar('id', { length: 255 }).primaryKey(),
        entityType: pgVarchar('entity_type', { length: 50 }).notNull(),
        entityId: pgVarchar('entity_id', { length: 255 }).notNull(),
        entityName: pgVarchar('entity_name', { length: 255 }).notNull(),
        action: pgVarchar('action', { length: 50 }).notNull(),
        userId: pgVarchar('user_id', { length: 255 }).notNull(),
        userName: pgVarchar('user_name', { length: 255 }).notNull(),
        changesSummary: pgText('changes_summary'),
        previousData: pgText('previous_data'),
        newData: pgText('new_data'),
        ipAddress: pgVarchar('ip_address', { length: 45 }),
        userAgent: pgText('user_agent'),
        createdAt: pgText('created_at').notNull(),
      }),

      projectSnapshots: pgTable('project_snapshots', {
        id: pgVarchar('id', { length: 255 }).primaryKey(),
        projectId: pgVarchar('project_id', { length: 255 }).notNull(),
        projectName: pgVarchar('project_name', { length: 255 }).notNull(),
        version: pgInteger('version').notNull(),
        diagramData: pgText('diagram_data').notNull(),
        description: pgText('description'),
        status: pgVarchar('status', { length: 50 }).notNull(),
        maxBuildsToKeep: pgInteger('max_builds_to_keep'),
        maxLogDays: pgInteger('max_log_days'),
        createdBy: pgVarchar('created_by', { length: 255 }).notNull(),
        createdByName: pgVarchar('created_by_name', { length: 255 }).notNull(),
        snapshotType: pgVarchar('snapshot_type', { length: 50 }).notNull(),
        createdAt: pgText('created_at').notNull(),
      })
    }
  }

  // ========================================================================
  // SQLITE SCHEMA (Default)
  // ========================================================================
  return {
    users: sqliteTable('users', {
      id: text('id').primaryKey(),
      name: text('name').notNull(),
      email: text('email').notNull().unique(),
      passwordHash: text('password_hash'),
      role: text('role'),
      userType: text('user_type').notNull().default('local'),
      externalId: text('external_id'),
      groups: text('groups'),
      lastLogin: text('last_login'),
      isActive: text('is_active').notNull().default('true'),
      createdAt: text('created_at').notNull(),
      updatedAt: text('updated_at').notNull(),
    }),

    items: sqliteTable('items', {
      id: text('id').primaryKey(),
      name: text('name').notNull(),
      description: text('description'),
      type: text('type').notNull(),
      path: text('path').notNull(),
      userId: text('user_id').notNull(),
      diagramData: text('diagram_data'),
      status: text('status').notNull().default('active'),
      accessPolicy: text('access_policy').default('public'),
      allowedGroups: text('allowed_groups'),
      maxBuildsToKeep: integer('max_builds_to_keep').default(50),
      maxLogDays: integer('max_log_days').default(30),
      createdAt: text('created_at').notNull(),
      updatedAt: text('updated_at').notNull(),
    }),

    envVariables: sqliteTable('env_variables', {
      id: text('id').primaryKey(),
      key: text('key').notNull().unique(),
      value: text('value').notNull(),
      description: text('description'),
      isSecret: text('is_secret').notNull().default('false'),
      createdAt: text('created_at').notNull(),
      updatedAt: text('updated_at').notNull(),
    }),

    credentialVault: sqliteTable('credential_vault', {
      id: text('id').primaryKey(),
      name: text('name').notNull(),
      type: text('type').notNull(),
      description: text('description'),
      username: text('username'),
      password: text('password'),
      token: text('token'),
      privateKey: text('private_key'),
      certificate: text('certificate'),
      fileData: text('file_data'),
      fileName: text('file_name'),
      fileMimeType: text('file_mime_type'),
      url: text('url'),
      environment: text('environment'),
      tags: text('tags'),
      customFields: text('custom_fields'),
      expiresAt: text('expires_at'),
      lastUsed: text('last_used'),
      isActive: text('is_active').notNull().default('true'),
      createdAt: text('created_at').notNull(),
      updatedAt: text('updated_at').notNull(),
    }),

    passwordVault: sqliteTable('password_vault', {
      id: text('id').primaryKey(),
      name: text('name').notNull(),
      username: text('username'),
      password: text('password').notNull(),
      url: text('url'),
      description: text('description'),
      createdAt: text('created_at').notNull(),
      updatedAt: text('updated_at').notNull(),
    }),

    systemSettings: sqliteTable('system_settings', {
      id: text('id').primaryKey(),
      category: text('category').notNull(),
      key: text('key').notNull().unique(),
      value: text('value'),
      defaultValue: text('default_value'),
      type: text('type').notNull(),
      options: text('options'),
      label: text('label').notNull(),
      description: text('description'),
      required: text('required').notNull().default('false'),
      readonly: text('readonly').notNull().default('false'),
      createdAt: text('created_at').notNull(),
      updatedAt: text('updated_at').notNull(),
    }),

    agents: sqliteTable('agents', {
      id: text('id').primaryKey(),
      name: text('name').notNull(),
      description: text('description'),
      token: text('token').notNull().unique(),
      maxConcurrentJobs: integer('max_concurrent_jobs').notNull().default(1),
      isLocal: text('is_local').notNull().default('false'),
      hostname: text('hostname'),
      platform: text('platform'),
      architecture: text('architecture'),
      capabilities: text('capabilities'),
      version: text('version'),
      systemInfo: text('system_info'),
      status: text('status').notNull().default('offline'),
      currentJobs: integer('current_jobs').notNull().default(0),
      lastHeartbeat: text('last_heartbeat'),
      ipAddress: text('ip_address'),
      firstConnectedAt: text('first_connected_at'),
      totalBuilds: integer('total_builds').notNull().default(0),
      tags: text('tags'),
      notes: text('notes'),
      createdAt: text('created_at').notNull(),
      updatedAt: text('updated_at').notNull(),
    }),

    builds: sqliteTable('builds', {
      projectId: text('project_id').notNull(),
      projectName: text('project_name').notNull(),
      buildNumber: integer('build_number').notNull(),
      agentId: text('agent_id'),
      agentName: text('agent_name'),
      trigger: text('trigger').notNull(),
      status: text('status').notNull(),
      message: text('message'),
      startedAt: text('started_at').notNull(),
      finishedAt: text('finished_at'),
      duration: integer('duration'),
      currentCommandIndex: integer('current_command_index'),
      executionCommands: text('execution_commands'),
      currentNodeId: text('current_node_id'),
      currentNodeLabel: text('current_node_label'),
      nodes: text('nodes'),
      edges: text('edges'),
      nodeCount: integer('node_count'),
      nodesExecuted: integer('nodes_executed'),
      exitCode: integer('exit_code'),
      error: text('error'),
      finalOutput: text('final_output'),
      canRetryOnReconnect: text('can_retry_on_reconnect').default('false'),
      parallelBranchesResult: text('parallel_branches_result'),
      parallelMatrixResult: text('parallel_matrix_result'),
      gitBranch: text('git_branch'),
      gitCommit: text('git_commit'),
      metadata: text('metadata'),
      outputLog: text('output_log'),
      nodeExecutionStates: text('node_execution_states'),
      lastSequence: integer('last_sequence').default(0),
      createdAt: text('created_at').notNull(),
      updatedAt: text('updated_at').notNull(),
    }, (table) => {
      return {
        pk: primaryKey({ columns: [table.projectId, table.buildNumber] }),
        statusIdx: index('idx_builds_status').on(table.status),
        startedAtIdx: index('idx_builds_started_at').on(table.startedAt),
      }
    }),

    cronJobs: sqliteTable('cron_jobs', {
      id: text('id').primaryKey(),
      projectId: text('project_id').notNull(),
      cronNodeId: text('cron_node_id').notNull(),
      cronNodeLabel: text('cron_node_label').notNull(),
      cronExpression: text('cron_expression').notNull(),
      enabled: text('enabled').notNull().default('true'),
      nodes: text('nodes').notNull(),
      edges: text('edges').notNull(),
      lastRun: text('last_run'),
      createdAt: text('created_at').notNull(),
      updatedAt: text('updated_at').notNull(),
    }),

    auditLogs: sqliteTable('audit_logs', {
      id: text('id').primaryKey(),
      entityType: text('entity_type').notNull(),
      entityId: text('entity_id').notNull(),
      entityName: text('entity_name').notNull(),
      action: text('action').notNull(),
      userId: text('user_id').notNull(),
      userName: text('user_name').notNull(),
      changesSummary: text('changes_summary'),
      previousData: text('previous_data'),
      newData: text('new_data'),
      ipAddress: text('ip_address'),
      userAgent: text('user_agent'),
      createdAt: text('created_at').notNull(),
    }),

    projectSnapshots: sqliteTable('project_snapshots', {
      id: text('id').primaryKey(),
      projectId: text('project_id').notNull(),
      projectName: text('project_name').notNull(),
      version: integer('version').notNull(),
      diagramData: text('diagram_data').notNull(),
      description: text('description'),
      status: text('status').notNull(),
      maxBuildsToKeep: integer('max_builds_to_keep'),
      maxLogDays: integer('max_log_days'),
      createdBy: text('created_by').notNull(),
      createdByName: text('created_by_name').notNull(),
      snapshotType: text('snapshot_type').notNull(),
      createdAt: text('created_at').notNull(),
    })
  }
}
